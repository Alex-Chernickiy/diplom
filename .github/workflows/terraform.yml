name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #AWS_ACCESS_KEY_ID: AKIARNGVWZTHN4D5Y7OR
      #AWS_SECRET_ACCESS_KEY: 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
    
    

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.5.6


    - name: Terraform Init Reconfigure
      run: terraform init -reconfigure

      
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    # - name: Terraform Init
    #   run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform fmt
      run: terraform fmt


      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      #if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      #run: terraform apply -auto-approve -var-file=dev.tfvars
      run: terraform plan -var-file=dev.tfvars
